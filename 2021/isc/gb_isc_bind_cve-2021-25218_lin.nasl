# Copyright (C) 2021 Greenbone Networks GmbH
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

CPE = "cpe:/a:isc:bind";

if (description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.146528");
  script_version("2021-08-30T08:01:20+0000");
  script_tag(name:"last_modification", value:"2021-08-30 08:01:20 +0000 (Mon, 30 Aug 2021)");
  script_tag(name:"creation_date", value:"2021-08-19 11:34:06 +0000 (Thu, 19 Aug 2021)");
  script_tag(name:"cvss_base", value:"5.0");
  script_tag(name:"cvss_base_vector", value:"AV:N/AC:L/Au:N/C:N/I:N/A:P");
  script_tag(name:"severity_vector", value:"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
  script_tag(name:"severity_origin", value:"NVD");
  script_tag(name:"severity_date", value:"2021-08-27 20:12:00 +0000 (Fri, 27 Aug 2021)");

  script_cve_id("CVE-2021-25218");

  script_tag(name:"qod_type", value:"remote_banner_unreliable");

  script_tag(name:"solution_type", value:"VendorFix");

  script_name("ISC BIND DoS Vulnerability (CVE-2021-25218) - Linux");

  script_category(ACT_GATHER_INFO);

  script_copyright("Copyright (C) 2021 Greenbone Networks GmbH");
  script_family("Denial of Service");
  script_dependencies("gb_isc_bind_consolidation.nasl", "os_detection.nasl");
  script_mandatory_keys("isc/bind/detected", "Host/runs_unixoide");

  script_tag(name:"summary", value:"ISC BIND is prone to a denial of service (DoS) vulnerability.");

  script_tag(name:"vuldetect", value:"Checks if a vulnerable version is present on the target host.");

  script_tag(name:"insight", value:"If named attempts to respond over UDP with a response that is
  larger than the current effective interface maximum transmission unit (MTU), and if response-rate
  limiting (RRL) is active, an assertion failure is triggered (resulting in termination of the
  named server process).

  There are two ways for named to exceed the interface MTU:

  - Direct configuration in named.conf setting max-udp-size to a value larger than the interface's
  MTU, or

  - Path MTU discovery (PMTUD) informing the IP stack that it should use a smaller MTU for
  the interface and destination than the default max-udp-size value of 1232. Some operating systems
  allow packets received via other protocols to affect PMTUD values for DNS over UDP.

  While RRL is not enabled by default for user-defined views or the built-in default INTERNET (IN)
  class view, '_default', the built-in default CHAOS (CH) class view, '_bind', does have RRL
  enabled.

  Note that while this defect can be triggered through misconfiguration or by deliberate
  exploitation, it can also arise during normal operating conditions, even with hardened PMTUD
  settings.");

  script_tag(name:"impact", value:"When a vulnerable version of named receives a query under the
  circumstances described above, the named process will terminate due to a failed assertion check.");

  script_tag(name:"affected", value:"BIND version 9.16.19, 9.17.16 and 9.16.19-S1.");

  script_tag(name:"solution", value:"Update to version 9.16.20, 9.17.17, 9.16.20-S1 or later.");

  script_xref(name:"URL", value:"https://kb.isc.org/v1/docs/cve-2021-25218");

  exit(0);
}

include("host_details.inc");
include("version_func.inc");

if (isnull(port = get_app_port(cpe: CPE)))
  exit(0);

if (!infos = get_app_full(cpe: CPE, port: port, exit_no_version: TRUE))
  exit(0);

version = infos["version"];
proto = infos["proto"];
location = infos["location"];

if (version == "9.16.19s1") {
  report = report_fixed_ver(installed_version: version, fixed_version: "9.16.20-S1", install_path: location);
  security_message(port: port, data: report, proto: proto);
  exit(0);
}

if (version == "9.16.19") {
  report = report_fixed_ver(installed_version: version, fixed_version: "9.16.20", install_path: location);
  security_message(port: port, data: report, proto: proto);
  exit(0);
}

if (version == "9.17.16") {
  report = report_fixed_ver(installed_version: version, fixed_version: "9.17.17", install_path: location);
  security_message(port: port, data: report, proto: proto);
  exit(0);
}

exit(99);
