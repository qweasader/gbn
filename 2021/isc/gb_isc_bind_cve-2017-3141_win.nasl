# Copyright (C) 2021 Greenbone Networks GmbH
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

CPE = "cpe:/a:isc:bind";

if (description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.146631");
  script_version("2021-09-06T14:01:33+0000");
  script_tag(name:"last_modification", value:"2021-09-06 14:01:33 +0000 (Mon, 06 Sep 2021)");
  script_tag(name:"creation_date", value:"2021-09-06 09:00:52 +0000 (Mon, 06 Sep 2021)");
  script_tag(name:"cvss_base", value:"7.2");
  script_tag(name:"cvss_base_vector", value:"AV:L/AC:L/Au:N/C:C/I:C/A:C");
  script_tag(name:"severity_vector", value:"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H");
  script_tag(name:"severity_origin", value:"NVD");
  script_tag(name:"severity_date", value:"2019-10-09 23:27:00 +0000 (Wed, 09 Oct 2019)");

  script_cve_id("CVE-2017-3141");

  script_tag(name:"qod_type", value:"remote_banner");

  script_tag(name:"solution_type", value:"VendorFix");

  script_name("ISC BIND Unquoted Path Vulnerability (CVE-2017-3141) - Windows");

  script_category(ACT_GATHER_INFO);

  script_copyright("Copyright (C) 2021 Greenbone Networks GmbH");
  script_family("General");
  script_dependencies("gb_isc_bind_consolidation.nasl", "os_detection.nasl");
  script_mandatory_keys("isc/bind/detected", "Host/runs_windows");

  script_tag(name:"summary", value:"ISC BIND on Windows is prone to an unquoted path vulnerability.");

  script_tag(name:"vuldetect", value:"Checks if a vulnerable version is present on the target host.");

  script_tag(name:"insight", value:"The BIND installer on Windows uses an unquoted service path,
  which can enable a local user to achieve privilege escalation if the host file system permissions
  allow this.");

  script_tag(name:"impact", value:"This vulnerability exists in the installer delivered with BIND
  for Windows and not within BIND itself. Non-Windows builds and installations are unaffected. A
  manual installation of BIND where the service path is quoted when added would not be at risk.");

  script_tag(name:"affected", value:"BIND 9.2.6-P2 through 9.2.9, 9.3.2-P1 through 9.3.6, 9.4.0
  through 9.8.8, 9.9.0 through 9.9.10, 9.10.0 through 9.10.5, 9.11.0 through 9.11.1, 9.9.3-S1
  through 9.9.10-S1 and 9.10.5-S1.");

  script_tag(name:"solution", value:"Update to version 9.9.10-P1, 9.10.5-P1, 9.11.1-P1, 9.9.10-S2,
  9.10.5-S2 or later.");

  script_xref(name:"URL", value:"https://kb.isc.org/docs/aa-01496");

  exit(0);
}

include("host_details.inc");
include("version_func.inc");

if (isnull(port = get_app_port(cpe: CPE)))
  exit(0);

if (!infos = get_app_full(cpe: CPE, port: port, exit_no_version: TRUE))
  exit(0);

version = infos["version"];
proto = infos["proto"];
location = infos["location"];

if (version =~ "^9\.(9|10)\.[0-9]+s[0-9]") {
  if (version_in_range(version: version, test_version: "9.9.3s1", test_version2: "9.9.10s1")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.9.10-S2", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

  if (version_is_equal(version: version, test_version: "9.10.5-S1")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.10.5-S2", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }
} else {
  if (version_in_range(version: version, test_version: "9.2.6p2", test_version2: "9.2.9") ||
      version_in_range(version: version, test_version: "9.3.2p1", test_version2: "9.3.6") ||
      version_in_range(version: version, test_version: "9.4.0", test_version2: "9.8.8") ||
      version_in_range(version: version, test_version: "9.9.0", test_version2: "9.9.10")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.9.10-P1", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

  if (version_in_range(version: version, test_version: "9.10.0", test_version2: "9.10.5")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.10.5-P1", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

  if (version_in_range(version: version, test_version: "9.11.0", test_version2: "9.11.1")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.11.1-P1", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }
}

exit(99);
