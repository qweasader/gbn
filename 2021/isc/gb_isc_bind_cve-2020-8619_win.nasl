# Copyright (C) 2021 Greenbone Networks GmbH
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

CPE = "cpe:/a:isc:bind";

if (description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.146641");
  script_version("2021-09-06T14:01:33+0000");
  script_tag(name:"last_modification", value:"2021-09-06 14:01:33 +0000 (Mon, 06 Sep 2021)");
  script_tag(name:"creation_date", value:"2021-09-06 11:24:45 +0000 (Mon, 06 Sep 2021)");
  script_tag(name:"cvss_base", value:"4.0");
  script_tag(name:"cvss_base_vector", value:"AV:N/AC:L/Au:S/C:N/I:N/A:P");
  script_tag(name:"severity_vector", value:"CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H");
  script_tag(name:"severity_origin", value:"NVD");
  script_tag(name:"severity_date", value:"2020-10-20 12:15:00 +0000 (Tue, 20 Oct 2020)");

  script_cve_id("CVE-2020-8619");

  script_tag(name:"qod_type", value:"remote_banner");

  script_tag(name:"solution_type", value:"VendorFix");

  script_name("ISC BIND DoS Vulnerability (CVE-2020-8619) - Windows");

  script_category(ACT_GATHER_INFO);

  script_copyright("Copyright (C) 2021 Greenbone Networks GmbH");
  script_family("Denial of Service");
  script_dependencies("gb_isc_bind_consolidation.nasl", "os_detection.nasl");
  script_mandatory_keys("isc/bind/detected", "Host/runs_windows");

  script_tag(name:"summary", value:"ISC BIND is prone to a denial of service (DoS) vulnerability.");

  script_tag(name:"vuldetect", value:"Checks if a vulnerable version is present on the target host.");

  script_tag(name:"insight", value:"The asterisk character ('*') is allowed in DNS zone files,
  where it is most commonly present as a wildcard at a terminal node of the Domain Name System
  graph. However, the RFCs do not require and BIND does not enforce that an asterisk character be
  present only at a terminal node.

  A problem can occur when an asterisk is present in an empty non-terminal location within the DNS
  graph. If such a node exists, after a series of queries, named can reach an inconsistent state
  that results in the failure of an assertion check in rbtdb.c, followed by the program exiting due
  to the assertion failure.");

  script_tag(name:"impact", value:"Unless a nameserver is providing authoritative service for one
  or more zones and at least one zone contains an empty non-terminal entry containing an asterisk
  ('*') character, this defect cannot be encountered. A would-be attacker who is allowed to change
  zone content could theoretically introduce such a record in order to exploit this condition to
  cause denial of service, though we consider the use of this vector unlikely because any such
  attack would require a significant privilege level and be easily traceable.");

  script_tag(name:"affected", value:"BIND 9.11.14 through 9.11.19, 9.14.9 through 9.14.12, 9.16.0
  through 9.16.3 and 9.11.14-S1 through 9.11.19-S1.");

  script_tag(name:"solution", value:"Update to version 9.11.20, 9.16.4, 9.11.20-S1 or later.");

  script_xref(name:"URL", value:"https://kb.isc.org/docs/cve-2020-8619");

  exit(0);
}

include("host_details.inc");
include("version_func.inc");

if (isnull(port = get_app_port(cpe: CPE)))
  exit(0);

if (!infos = get_app_full(cpe: CPE, port: port, exit_no_version: TRUE))
  exit(0);

version = infos["version"];
proto = infos["proto"];
location = infos["location"];

if (version =~ "^9\.11\.[0-9]+s[0-9]") {
  if (version_in_range(version: version, test_version: "9.11.14s1", test_version2: "9.11.19s1")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.11.20-S1", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }
} else {
  if (version_in_range(version: version, test_version: "9.11.14", test_version2: "9.11.19")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.11.20", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

  if (version_in_range(version: version, test_version: "9.14.9", test_version2: "9.14.12") ||
      version_in_range(version: version, test_version: "9.16.0", test_version2: "9.16.3")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.16.4", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }
}

exit(99);
