# SPDX-FileCopyrightText: 2023 Greenbone AG
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-or-later

CPE = "cpe:/a:python:python";

if(description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.124284");
  script_version("2023-05-12T10:50:26+0000");
  script_tag(name:"last_modification", value:"2023-05-12 10:50:26 +0000 (Fri, 12 May 2023)");
  script_tag(name:"creation_date", value:"2023-02-20 12:40:42 +0000 (Mon, 20 Feb 2023)");
  script_tag(name:"cvss_base", value:"5.1");
  script_tag(name:"cvss_base_vector", value:"AV:N/AC:H/Au:N/C:P/I:P/A:P");

  script_cve_id("CVE-2023-24329");

  script_tag(name:"qod_type", value:"remote_banner");

  script_tag(name:"solution_type", value:"VendorFix");

  script_name("Python < 3.11.1 RCE Vulnerability - Windows");

  script_category(ACT_GATHER_INFO);

  script_copyright("Copyright (C) 2023 Greenbone AG");
  script_family("General");
  script_dependencies("gb_python_consolidation.nasl", "os_detection.nasl");
  script_mandatory_keys("python/detected", "Host/runs_windows");

  script_tag(name:"summary", value:"Python is prone to a remote code execution (RCE) vulnerability.");

  script_tag(name:"vuldetect", value:"Checks if a vulnerable version is present on the target host.");

  script_tag(name:"insight", value:"An issue in the urllib.parse component allows attackers to
  bypass blocklisting methods by supplying a URL that starts with blank characters.");

  script_tag(name:"affected", value:"Python versions prior to 3.11.1.");

  script_tag(name:"solution", value:"Update to version 3.11.1 or later.");

  script_xref(name:"URL", value:"https://python-security.readthedocs.io/vuln/urlparse-scheme.html");
  script_xref(name:"URL", value:"https://github.com/advisories/GHSA-r32r-rqw2-wv5m");
  script_xref(name:"URL", value:"https://pointernull.com/security/python-url-parse-problem.html");

  exit(0);
}

include("host_details.inc");
include("version_func.inc");

if (isnull(port = get_app_port(cpe: CPE)))
  exit(0);

if (!infos = get_app_version_and_location(cpe: CPE, port: port, exit_no_version: TRUE))
  exit(0);

version = infos["version"];
location = infos["location"];

if (version_is_less(version: version, test_version: "3.11.1")) {
  report = report_fixed_ver(installed_version: version, fixed_version: "3.11.1", install_path: location);
  security_message(port: port, data: report);
  exit(0);
}

exit(99);
