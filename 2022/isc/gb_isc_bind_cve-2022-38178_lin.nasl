# Copyright (C) 2022 Greenbone Networks GmbH
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

CPE = "cpe:/a:isc:bind";

if (description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.124174");
  script_version("2023-10-18T05:05:17+0000");
  script_tag(name:"last_modification", value:"2023-10-18 05:05:17 +0000 (Wed, 18 Oct 2023)");
  script_tag(name:"creation_date", value:"2022-09-23 10:55:12 +0000 (Fri, 23 Sep 2022)");
  script_tag(name:"cvss_base", value:"7.8");
  script_tag(name:"cvss_base_vector", value:"AV:N/AC:L/Au:N/C:N/I:N/A:C");
  script_tag(name:"severity_vector", value:"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
  script_tag(name:"severity_origin", value:"NVD");
  script_tag(name:"severity_date", value:"2022-09-23 16:44:00 +0000 (Fri, 23 Sep 2022)");

  script_cve_id("CVE-2022-38178");

  script_tag(name:"qod_type", value:"remote_banner_unreliable");

  script_tag(name:"solution_type", value:"VendorFix");

  script_name("ISC BIND DoS Vulnerability (CVE-2022-38178) - Linux");

  script_category(ACT_GATHER_INFO);

  script_copyright("Copyright (C) 2022 Greenbone Networks GmbH");
  script_family("Denial of Service");
  script_dependencies("gb_isc_bind_consolidation.nasl", "os_detection.nasl");
  script_mandatory_keys("isc/bind/detected", "Host/runs_unixoide");

  script_tag(name:"summary", value:"ISC BIND is prone to a denial of service (DoS) vulnerability.");

  script_tag(name:"vuldetect", value:"Checks if a vulnerable version is present on the target host.");

  script_tag(name:"insight", value:"The DNSSEC verification code for the EdDSA algorithm leaks
  memory when there is a signature length mismatch.");

  script_tag(name:"impact", value:"By spoofing the target resolver with responses that have a
  malformed EdDSA signature, an attacker can trigger a small memory leak. It is possible to
  gradually erode available memory to the point where named crashes for lack of resources.");

  script_tag(name:"affected", value:"ISC BIND versions 9.9.12 through 9.9.13, 9.10.7 through 9.10.8,
  9.11.4-S1 through 9.11.37-S1, 9.16.8-S1 through 9.16.32-S1, 9.18.0 through 9.18.6 and 9.19.0
  through 9.19.4.");

  script_tag(name:"solution", value:"Update to version 9.16.33, 9.18.7, 9.19.5, 9.16.33-S1 or later.");

  script_xref(name:"URL", value:"https://kb.isc.org/docs/cve-2022-38178");

  exit(0);
}

include("host_details.inc");
include("version_func.inc");

if (isnull(port = get_app_port(cpe: CPE)))
  exit(0);

if (!infos = get_app_full(cpe: CPE, port: port, exit_no_version: TRUE))
  exit(0);

version = infos["version"];
proto = infos["proto"];
location = infos["location"];

if (version =~ "^9\.[0-9]+\.[0-9]+s[0-9]") {
  if (version_in_range(version: version, test_version: "9.11.4s1", test_version2: "9.11.37s1")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.16.33-S1", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

    if (version_in_range(version: version, test_version: "9.16.8s1", test_version2: "9.16.32s1")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.16.33-S1", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }
} else {
  if (version_in_range(version: version, test_version: "9.9.12", test_version2: "9.9.13")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.16.33", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

    if (version_in_range(version: version, test_version: "9.10.7", test_version2: "9.10.8")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.16.33", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

  if (version_in_range(version: version, test_version: "9.11.3", test_version2: "9.16.32")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.16.33", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

  if (version_in_range(version: version, test_version: "9.18.0", test_version2: "9.18.6")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.18.7", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }

    if (version_in_range(version: version, test_version: "9.19.0", test_version2: "9.19.4")) {
    report = report_fixed_ver(installed_version: version, fixed_version: "9.19.5", install_path: location);
    security_message(port: port, data: report, proto: proto);
    exit(0);
  }
}

exit(99);
